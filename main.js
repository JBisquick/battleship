(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),c=n.n(a)()(r());c.push([e.id,".gameboards {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n  grid-template-rows: repeat(10, 50px);\n  width: 500px;\n  height: 500px;\n}\n\n.space,\n.opSpace:hover {\n  cursor: pointer;\n}\n\n.miss {\n  position: relative;\n  border: 1px solid black;\n  background-color: blue;\n  width: 50px;\n  height: 50px;\n}\n\n.hit {\n  position: relative;\n  border: 1px solid black;\n  background-color: red;\n  width: 50px;\n  height: 50px;\n}\n\n.space,\n.opSpace {\n  position: relative;\n  border: 1px solid black;\n  background-color: white;\n  width: 50px;\n  height: 50px;\n}\n\n.ship {\n  position: relative;\n  border: 1px solid black;\n  background-color: grey;\n  width: 50px;\n  height: 50px;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,uCAAuC;EACvC,oCAAoC;EACpC,YAAY;EACZ,aAAa;AACf;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,sBAAsB;EACtB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,qBAAqB;EACrB,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,kBAAkB;EAClB,uBAAuB;EACvB,uBAAuB;EACvB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,sBAAsB;EACtB,WAAW;EACX,YAAY;AACd",sourcesContent:[".gameboards {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n  grid-template-rows: repeat(10, 50px);\n  width: 500px;\n  height: 500px;\n}\n\n.space,\n.opSpace:hover {\n  cursor: pointer;\n}\n\n.miss {\n  position: relative;\n  border: 1px solid black;\n  background-color: blue;\n  width: 50px;\n  height: 50px;\n}\n\n.hit {\n  position: relative;\n  border: 1px solid black;\n  background-color: red;\n  width: 50px;\n  height: 50px;\n}\n\n.space,\n.opSpace {\n  position: relative;\n  border: 1px solid black;\n  background-color: white;\n  width: 50px;\n  height: 50px;\n}\n\n.ship {\n  position: relative;\n  border: 1px solid black;\n  background-color: grey;\n  width: 50px;\n  height: 50px;\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);o&&c[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],s=0;s<e.length;s++){var i=e[s],l=o.base?i[0]+o.base:i[0],p=a[l]||0,u="".concat(l," ").concat(p);a[l]=p+1;var d=n(u),f={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var A=r(f,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:A,references:1})}c.push(u)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var s=n(a[c]);t[s].references--}for(var i=o(e,r),l=0;l<a.length;l++){var p=n(a[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}a=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),a=n(569),c=n.n(a),s=n(565),i=n.n(s),l=n(216),p=n.n(l),u=n(589),d=n.n(u),f=n(28),A={};function h(){let e=new Array(10);for(let t=0;t<10;t++)e[t]=new Array(10).fill("empty");const t=(t,n,o,r)=>{e[o][n]=t;for(let a=1;a<t.length;a++)"col"===r?o+=1:"row"===r&&(n+=1),e[o][n]=t},n=(e,t,n,c)=>!o(e,t,n,c)&&!r(e,t,n,c)&&!a(e,t,n,c),o=(e,t,n,o)=>"row"===o&&t+e.length>10||"col"===o&&n+e.length>10,r=(t,n,o,r)=>{for(let a=1;a<=t.length;a++){if("empty"!==e[o][n])return!0;"col"===r?o+=1:"row"===r&&(n+=1)}return!1},a=(t,n,o,r)=>{for(let a=1;a<=t.length;a++){if(9!==n&&"empty"!==e[o][n+1])return!0;if(0!==n&&"empty"!==e[o][n-1])return!0;if(9!==o&&"empty"!==e[o+1][n])return!0;if(0!==o&&"empty"!==e[o-1][n])return!0;"col"===r?o+=1:"row"===r&&(n+=1)}return!1};return{getBoard:()=>e,placeShip:t,recieveAttack:(t,n)=>{const o=e[n][t];if("empty"===o)e[n][t]="missed";else if("object"==typeof o)return o.hit(),o},isGameOver:()=>{for(const t of e)for(const e of t)if("object"==typeof e&&!1===e.isSunk())return!1;return!0},isPlacePossible:n,placeShipRandom:e=>{let o;o=1===Math.floor(2*Math.random())?"row":"col";let r=!0;for(;r;){const a=Math.floor(99*Math.random()),c=a%10,s=Math.floor(a/10);n(e,c,s,o)&&(t(e,c,s,o),r=!1)}}}}function m(){let e=[],t=[0,0];for(let n=0;n<100;n++)e.push([t[0],t[1]]),t[0]<9?t[0]+=1:(t[1]+=1,t[0]=0);let n=[],o=[];const r=(t,n)=>{for(const o of e)if(o[0]===t&&o[1]===n)return!1;return!0},a=(t,n)=>{let o=0;for(let r of e){if(t===r[0]&&n===r[1])break;o++}e.splice(o,1)},c=(e,t)=>{!1===r(e-1,t)&&n.push([e-1,t]),!1===r(e,t-1)&&n.push([e,t-1]),!1===r(e+1,t)&&n.push([e+1,t]),!1===r(e,t+1)&&n.push([e,t+1])},s=()=>{n=[];const e=o[0].map((function(e,t){return e-o[1][t]}));console.log(e);for(const t of o){const o=t[0],a=t[1];0!==e[0]?(!1===r(o+1,a)&&n.push([o+1,a]),!1===r(o-1,a)&&n.push([o-1,a])):(!1===r(o,a+1)&&n.push([o,a+1]),!1===r(o,a-1)&&n.push([o,a-1]))}};return{attackBoard:(e,t,n)=>{!0!==r(t,n)&&(a(t,n),e.recieveAttack(t,n))},computerAttack:t=>n.length>0?(e=>{const t=Math.floor(Math.random()*n.length),r=n[t];return a(r[0],r[1]),((e,t)=>{let o=0;for(let r of n){if(e===r[0]&&t===r[1])break;o++}n.splice(o,1)})(r[0],r[1]),"object"==typeof e.recieveAttack(r[0],r[1])&&(o.push([r[0],r[1]]),s()),[r[0],r[1]]})(t):(o=[],(t=>{const n=Math.floor(Math.random()*e.length),r=e[n];return a(r[0],r[1]),"object"==typeof t.recieveAttack(r[0],r[1])&&(o.push([r[0],r[1]]),c(r[0],r[1])),[r[0],r[1]]})(t))}}function v(e,t){let n=0;return{length:e,name:t,getHitCount:()=>n,hit:()=>{n+=1},isSunk:()=>e-n<=0}}A.styleTagTransform=d(),A.setAttributes=i(),A.insert=c().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=p(),t()(f.Z,A),f.Z&&f.Z.locals&&f.Z.locals;const y=e=>{const t=document.querySelector("#player");for(const n of e)for(const e of n){const n=document.createElement("div");n.classList.add("space"),"object"==typeof e&&n.classList.add("ship"),t.appendChild(n)}},b=e=>{e.target.classList.remove("opSpace")},g=(e,t,n)=>{let o=10*t;o+=e;let r=0;for(let e of n)r===o&&(e.classList.contains("ship")?(e.classList.add("hit"),e.classList.remove("ship")):e.classList.add("miss"),e.classList.remove("space")),r++},x=(e,t)=>{const n=document.querySelector(".gameover");t.isGameOver()?n.textContent="You Have Won!":e.isGameOver()&&(n.textContent="You Have Lost!")},C=e=>{const t=document.querySelector(".rotate-button");let n,o,r=document.querySelectorAll(".space");"row"===t.value&&(n=50*e,o=50),"col"===t.value&&(n=50,o=50*e);for(let e of r){const t=e.style.backgroundColor;e.addEventListener("mouseenter",(function(t){e.style.backgroundColor="pink",e.style.width=`${n}px`,e.style.height=`${o}px`,e.style.zIndex="1"}),!1),e.addEventListener("mouseleave",(function(n){e.style.backgroundColor=t,e.style.width="50px",e.style.height="50px",e.style.zIndex="0"}),!1)}},E=(e,t,n,o,r=0)=>{let a=[v(5,"carrier"),v(4,"battleship"),v(3,"destroyer"),v(3,"submarine"),v(2,"patrol boat")];var c;document.querySelector("#player").innerHTML="",y(n.getBoard()),c=a[r].name,document.querySelector(".place-ship").textContent="Place your "+c,C(a[r].length);let s=document.querySelector(".place-container");s.style.display="block";const i=document.querySelector(".rotate-button");i.addEventListener("click",(function(){C(a[r].length)}));const l=document.querySelectorAll(".space");let p=0;for(let c of l){const l=Math.floor(p/10),u=p%10;c.addEventListener("click",(()=>{n.isPlacePossible(a[r],u,l,i.value)&&(n.placeShip(a[r],u,l,i.value),++r<5?E(e,t,n,o,r):(B(e,t,n,o),s.style.display="none"))})),p++}},B=(e,t,n,o)=>{let r=v(5,"carrier"),a=v(4,"battleship"),c=v(3,"destroyer"),s=v(3,"submarine"),i=v(2,"patrol boat");o.placeShipRandom(r),o.placeShipRandom(a),o.placeShipRandom(c),o.placeShipRandom(s),o.placeShipRandom(i),document.querySelector("#player").innerHTML="",y(n.getBoard()),(e=>{const t=document.querySelector(".gameboards"),n=document.createElement("div");n.setAttribute("id","computer"),n.classList.add("board"),t.appendChild(n);for(const t of e)for(const e of t){const t=document.createElement("div");t.classList.add("opSpace"),n.appendChild(t),"empty"===e?t.classList.add("miss"):t.classList.add("hit")}})(o.getBoard());let l=document.querySelectorAll(".space"),p=document.querySelectorAll(".opSpace"),u=0;for(let r of p){const a=Math.floor(u/10),c=u%10;r.addEventListener("click",(function r(s){e.attackBoard(o,c,a),b(s);const i=t.computerAttack(n);g(i[0],i[1],l),x(n,o),this.removeEventListener("click",r)})),u++}};document.querySelector(".rotate-button").addEventListener("click",(()=>{const e=document.querySelector(".rotate-button");"row"===e.value?e.value="col":e.value="row"}));let k=m(),S=m(),w=h(),L=h();E(k,S,w,L)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,